[{"D:\\Resume_Formatter_Project\\demo_project\\resumeai\\src\\index.js":"1","D:\\Resume_Formatter_Project\\demo_project\\resumeai\\src\\App.js":"2","D:\\Resume_Formatter_Project\\demo_project\\resumeai\\src\\reportWebVitals.js":"3","D:\\Resume_Formatter_Project\\demo_project\\resumeai\\src\\components\\SuggestionCard.jsx":"4","D:\\Research\\Positive_Reframing\\Front_End\\Positive_Reframs_Frontend\\demo_project\\positiveGPT\\src\\index.js":"5","D:\\Research\\Positive_Reframing\\Front_End\\Positive_Reframs_Frontend\\demo_project\\positiveGPT\\src\\App.js":"6","D:\\Research\\Positive_Reframing\\Front_End\\Positive_Reframs_Frontend\\demo_project\\positiveGPT\\src\\reportWebVitals.js":"7","D:\\Research\\Positive_Reframing\\Front_End\\Positive_Reframs_Frontend\\demo_project\\positiveGPT\\src\\components\\SuggestionCard.jsx":"8","D:\\Research\\Positive_Reframing\\Front_End\\Positive_Reframs_Frontend\\demo_project\\positiveGPT\\src\\components\\StrategySelection.jsx":"9","D:\\Research\\Positive_Reframing\\Front_End\\Positive_Reframs_Frontend\\demo_project\\positiveGPT\\src\\client.js":"10"},{"size":535,"mtime":1676937899582,"results":"11","hashOfConfig":"12"},{"size":4621,"mtime":1677354958087,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1676937899613,"results":"14","hashOfConfig":"12"},{"size":329,"mtime":1677302538691,"results":"15","hashOfConfig":"12"},{"size":552,"mtime":1678916978744,"results":"16","hashOfConfig":"17"},{"size":10480,"mtime":1682029339996,"results":"18","hashOfConfig":"17"},{"size":375,"mtime":1678916978744,"results":"19","hashOfConfig":"17"},{"size":1047,"mtime":1682011556748,"results":"20","hashOfConfig":"17"},{"size":1045,"mtime":1680040334212,"results":"21","hashOfConfig":"17"},{"size":215,"mtime":1682030844305,"results":"22","hashOfConfig":"17"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"85eoz",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"11zpd1m",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Resume_Formatter_Project\\demo_project\\resumeai\\src\\index.js",[],[],"D:\\Resume_Formatter_Project\\demo_project\\resumeai\\src\\App.js",["57","58","59"],[],"D:\\Resume_Formatter_Project\\demo_project\\resumeai\\src\\reportWebVitals.js",[],[],"D:\\Resume_Formatter_Project\\demo_project\\resumeai\\src\\components\\SuggestionCard.jsx",["60"],[],"D:\\Research\\Positive_Reframing\\Front_End\\Positive_Reframs_Frontend\\demo_project\\positiveGPT\\src\\index.js",[],[],[],"D:\\Research\\Positive_Reframing\\Front_End\\Positive_Reframs_Frontend\\demo_project\\positiveGPT\\src\\App.js",["61","62","63","64","65","66","67"],[],"// Create a react component that inputs a textarea message then performs a fetch request to localhost:3001 and get back a response as a data.message and displays the message in a box below\r\n// start with npm start - frontend\r\n// then node index.js - backend\r\n\r\n// should be a resume and job description\r\n\r\nimport React, { Component, useEffect } from 'react';\r\nimport './App.css';\r\nimport StrategySelection from './components/StrategySelection';\r\nimport SuggestionCard from './components/SuggestionCard.jsx';\r\nimport { supabase } from './client.js';\r\n\r\nfunction App(){\r\n  const [message, setMessage] = React.useState(''); // message to send to server\r\n  const [fileName, setFileName] = React.useState('☁ Upload Your Negative Thoughts.txt'); // name of the file to upload [should be a resume\r\n  const {characters, setCharacters} = React.useState(0); // number of characters in the textarea box\r\n  const [strategy, setStrategy] = React.useState('')\r\n\r\n  const [isSubmitting, setIsSubmitting] = React.useState(false); // check whether user has submitted the input or not\r\n  const [isLoading, setIsLoading] = React.useState(false); // check whether the model has sent back a response or not\r\n\r\n  const [responses_items_gpt, set_responses_gpt] = React.useState(''); // response from server\r\n  const [responses_text_gpt, set_responses_text_gpt] = React.useState(''); // response text from gpt\r\n\r\n  const [responses_items_own, set_responses_own] = React.useState(''); // response from server\r\n  const [responses_text_own, set_responses_text_own] = React.useState(''); // response text from own server\r\n  \r\n  const test_responses = [\"1. Take a break and focus on self-care. Make sure to get enough rest, eat healthy meals, and exercise regularly.\",\r\n                               \"2. Make time for activities that bring you joy. Whether it’s reading a book, listening to music, or going for a walk, find something that helps you relax and enjoy yourself.\", \r\n                               \"3. Talk to someone. Reach out to a friend or family member and let them know how you’re feeling. Talking to\"];\r\n  \r\n  const [userRatings, setUserRatings] = React.useState([\r\n    {id: 0, rating: 1}, // own server response 1\r\n    {id: 1, rating: 1}, // gpt response 1\r\n    {id: 2, rating: 1}, // gpt response 2\r\n    {id: 3, rating: 1}, // gpt response 3\r\n  ]); // user ratings for each response\r\n                               \r\n  const test_responses_items = test_responses.map((response_single) =>\r\n        <li className='suggestion_card_container'>\r\n          <SuggestionCard text={response_single} />\r\n        </li>\r\n  );\r\n\r\n  const handleFileUpload = (event) => {\r\n    const SelectedFile = event.target.files[0];\r\n    console.log(SelectedFile);\r\n    if(SelectedFile.type === \"text/plain\"){\r\n      const reader = new FileReader();\r\n      reader.readAsText(SelectedFile);\r\n      setFileName(`File name: ${SelectedFile.name}`);\r\n\r\n      // Once reader finishes reading the file, it will call the onload function\r\n      reader.onload = (event) => {\r\n        console.log(\"Getting user file:\")\r\n        setMessage(event.target.result);\r\n      }\r\n      \r\n    } else {\r\n      setFileName(\"File is not a clean text file. Please upload .txt file.\");\r\n    }\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    setMessage(event.target.value);\r\n    if(event.target.value.length > 100){\r\n      setMessage(event.target.value.substring(0,100));\r\n    }\r\n  } // update the message to send to the server\r\n\r\n  // after the user receives a response, they can chop it to a list of strings if they are separated by a dot character\r\n  // then display each string in a list=\r\n  const handleSubmit = async (event) => {\r\n    setIsSubmitting(true);\r\n    setIsLoading(true);\r\n    event.preventDefault();\r\n    await fetch('http://localhost:3001', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        message: message,\r\n        strategy: strategy\r\n      }),\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log(data)\r\n      console.log(\"Own Server response is: \", data.response_from_own_server);\r\n      console.log(\"GPT Server response is: \", data.response_from_gpt);\r\n\r\n      const responses_gpt = data.response_from_gpt.split(\"\\n\");\r\n      const response_from_own_server = data.response_from_own_server.split(\"\\n\");\r\n\r\n      const non_empty_responses_gpt = responses_gpt.filter((response_single) => response_single !== \"\");\r\n      const non_empty_responses_own = response_from_own_server.filter((response_single) => response_single !== \"\");\r\n      \r\n      const responses_items_own = non_empty_responses_own.map((response_single, index) =>\r\n        (<li className='suggestion_card_container'>\r\n          <SuggestionCard text={response_single} id={index} handleRatingChange={handleRatingChange}/>\r\n        </li>)\r\n      );\r\n\r\n      const responses_items_gpt = non_empty_responses_gpt.map((response_single, index) =>\r\n        (<li className='suggestion_card_container'>\r\n          <SuggestionCard text={response_single} id={index+1} handleRatingChange={handleRatingChange}/>\r\n        </li>)\r\n      );\r\n\r\n      // set response text\r\n      set_responses_text_own(non_empty_responses_own);\r\n      set_responses_text_gpt(non_empty_responses_gpt);\r\n      \r\n\r\n      // set response html elements\r\n      set_responses_own(responses_items_own);\r\n      set_responses_gpt(responses_items_gpt);\r\n      \r\n      setIsLoading(false);\r\n    }); // send the message to the server\r\n  }\r\n  \r\n  const handleRatingChange = (updated_rating, id) => {\r\n    console.log(\"Target rating is: \", updated_rating);\r\n    console.log(\"id is:\",id);\r\n    // record the rating from user\r\n\r\n    setUserRatings(prevRatings => {\r\n      // Get the index of the rating with the provided id\r\n      const index = prevRatings.findIndex(rating => rating.id == id);\r\n    \r\n      // Create a new array with updated values\r\n      const updatedRatings = [...prevRatings];\r\n      updatedRatings[index] = {\r\n        ...updatedRatings[index],\r\n        rating: parseInt(updated_rating) // Set the new rating value\r\n      };\r\n    \r\n      // Return the updated array\r\n      return updatedRatings;\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    // console log when the userRatings array is updated\r\n    console.log(\"User ratings are: \", userRatings);\r\n  }, [userRatings]);\r\n\r\n  const handleFeedBackSubmission = () => {\r\n    console.log(\"User ratings Submitted: \", userRatings);\r\n    postFeedBack();\r\n  }\r\n\r\n  const postFeedBack = async () => {\r\n    // if the rating have duplicates, then don't post to database, and alert the user\r\n    const current_ratings = userRatings.map((rating) => rating.rating);\r\n    const uniqueRatings = [...new Set(current_ratings)];\r\n    if(uniqueRatings.length !== current_ratings.length){\r\n      alert(\"Please make sure you have rated each response differently.\");\r\n      return;\r\n    }\r\n\r\n    await console.log(\"Posting feedback to database\", userRatings[0].rating)\r\n    // console log responses text for own server and gpt\r\n    console.log(\"Own server responses: \", responses_text_own);\r\n    console.log(\"GPT responses: \", responses_text_gpt);\r\n\r\n    const { data, error } = await supabase\r\n      .from('Ratings')\r\n      .insert([\r\n        { \r\n          original_message: message,\r\n          own_response_1_text: responses_text_own[0],\r\n          own_response_1_rating: userRatings[0].rating,\r\n          gpt_response_1_text: responses_text_gpt[0],\r\n          gpt_response_1_rating: userRatings[1].rating,\r\n          gpt_response_2_text: responses_text_gpt[1],\r\n          gpt_response_2_rating: userRatings[2].rating,\r\n          gpt_response_3_text: responses_text_gpt[2],\r\n          gpt_response_3_rating: userRatings[3].rating,\r\n        },\r\n    ])\r\n\r\n    if (error) console.log('error', error)\r\n  }\r\n\r\n  // for the response, chop it down to a list of strings if they are separated by a dot character\r\n  // then display each string in a list\r\n  // for the message, display it in a textarea box\r\n\r\n\r\n\r\n  // the textarea box and response text should be in the middle of the left screen and the right screen\r\n  return (\r\n  <div className=\"App\">\r\n    <div className=\"App_Header\">\r\n      <h1>Positive Reframer v1.0</h1>\r\n    </div>\r\n\r\n    <div>\r\n      <div className=\"User_Submit\">\r\n        <form onSubmit={handleSubmit}>\r\n          <h1>Look for a Positive Spin?</h1>\r\n          <div>\r\n            <label>\r\n              <textarea className='positive_text_area' maxLength={100} placeholder='Put the sentence for paraphrasing' value={message} onChange={handleChange} />\r\n              <p>{message.length}/100 Characters Limit</p>\r\n            </label>\r\n          </div>\r\n\r\n          <div>\r\n              <label htmlFor=\"resume-file\" className=\"custom-file-upload\">\r\n                <span>{fileName}</span>\r\n                <input className='submit_text_button' id=\"resume-file\" name='resume' type=\"file\" onChange={handleFileUpload}/>\r\n              </label>\r\n          </div>\r\n          \r\n          <StrategySelection setCurrentStrategy={setStrategy}/>\r\n          <input className='submit_button' type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    \r\n      <div className=\"Model_Response\">\r\n        <h1>Positive Reframed Sentences</h1>\r\n        <div className='answer_area'>\r\n          {/* {\r\n            <ul className='responses_items_contianer'>\r\n              {test_responses_items}\r\n            </ul>\r\n          } */}\r\n          {\r\n            isSubmitting ? (\r\n              isLoading ? (<p>Loading...</p> ) : \r\n                (\r\n                  <div>\r\n                    <h3>Own Responses</h3>\r\n                    <ul className='responses_items_contianer'>\r\n                      {responses_items_own}\r\n                    </ul>\r\n\r\n                    <h3> GPT Responses</h3>\r\n                    <ul className='responses_items_contianer'>\r\n                      {responses_items_gpt}\r\n                    </ul>\r\n                    <button \r\n                      class=\"submit_user_response_button\" \r\n                      role=\"button\"\r\n                      onClick={handleFeedBackSubmission}>Submit Feedback</button>\r\n                  </div>\r\n\r\n                  \r\n                  \r\n                  \r\n                )\r\n              ) : (<p>No input yet</p>)\r\n          }\r\n            \r\n        </div>\r\n        \r\n        \r\n      </div>  \r\n    </div>\r\n\r\n  </div>\r\n  \r\n);\r\n}\r\n\r\nexport default App;\r\n\r\n","D:\\Research\\Positive_Reframing\\Front_End\\Positive_Reframs_Frontend\\demo_project\\positiveGPT\\src\\reportWebVitals.js",[],[],"D:\\Research\\Positive_Reframing\\Front_End\\Positive_Reframs_Frontend\\demo_project\\positiveGPT\\src\\components\\SuggestionCard.jsx",["68","69","70","71","72"],[],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./SuggestionCard.css\";\r\nimport star from \"../assets/star.png\";\r\n\r\nconst Suggestion_card = (props) => {\r\n\r\n    const starList = [1, 2, 3, 4, 5];\r\n    const [rating, setRating] = React.useState(0);\r\n\r\n    const handleStarHover = (index) => {\r\n        setRating(index);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"suggestion_card\">\r\n            <div>\r\n                <p className=\"suggestion_card_description\">{props.text}</p>\r\n            </div>\r\n\r\n            <div className=\"rankings_selector\"  onChange={(e)=>props.handleRatingChange(e.target.value, props.id)}>\r\n                <p>Rankings: </p>\r\n                <select id=\"selection-list\" on>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Suggestion_card;\r\n\r\n","D:\\Research\\Positive_Reframing\\Front_End\\Positive_Reframs_Frontend\\demo_project\\positiveGPT\\src\\components\\StrategySelection.jsx",["73"],[],"import React from \"react\";\r\nimport './StrategySelection.css';\r\n\r\n// set current stargy and passed back to App.jsx\r\n// at least has 5 strategie in a row\r\nconst StrategySelection = (props) => {\r\n\r\n    const strategyList = [\"Growth\", \"Impermanence\", \"Neutralizing\", \"Optimism\", \"Self-Affirmation\", \"Thankfulness\"];\r\n\r\n    return (\r\n        <div className=\"strategies\" onChange={(e)=>props.setCurrentStrategy(e.target.value)}>\r\n            {\r\n                <select id=\"selection-list\" on>\r\n                    <option id=\"first-selection\" value=\"growth\">Growth</option>\r\n                    <option value=\"impermanence\">Impermanence</option>\r\n                    <option value=\"neutralizing\">Neutralizing</option>\r\n                    <option value=\"optimism\">Optimism</option>\r\n                    <option value=\"self_affirmation\">Self-Affirmation</option>\r\n                    <option value=\"thankfulness\">Thankfulness</option>\r\n                </select>\r\n            }\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StrategySelection;","D:\\Research\\Positive_Reframing\\Front_End\\Positive_Reframs_Frontend\\demo_project\\positiveGPT\\src\\client.js",[],[],{"ruleId":"74","severity":1,"message":"75","line":7,"column":17,"nodeType":"76","messageId":"77","endLine":7,"endColumn":26},{"ruleId":"74","severity":1,"message":"78","line":21,"column":9,"nodeType":"76","messageId":"77","endLine":21,"endColumn":29},{"ruleId":"74","severity":1,"message":"79","line":71,"column":13,"nodeType":"76","messageId":"77","endLine":71,"endColumn":27},{"ruleId":"74","severity":1,"message":"80","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":16},{"ruleId":"74","severity":1,"message":"75","line":7,"column":17,"nodeType":"76","messageId":"77","endLine":7,"endColumn":26},{"ruleId":"74","severity":1,"message":"81","line":16,"column":10,"nodeType":"76","messageId":"77","endLine":16,"endColumn":20},{"ruleId":"74","severity":1,"message":"82","line":16,"column":22,"nodeType":"76","messageId":"77","endLine":16,"endColumn":35},{"ruleId":"74","severity":1,"message":"78","line":39,"column":9,"nodeType":"76","messageId":"77","endLine":39,"endColumn":29},{"ruleId":"83","severity":1,"message":"84","line":131,"column":63,"nodeType":"85","messageId":"86","endLine":131,"endColumn":65},{"ruleId":"74","severity":1,"message":"87","line":169,"column":13,"nodeType":"76","messageId":"77","endLine":169,"endColumn":17},{"ruleId":"88","severity":1,"message":"89","line":246,"column":21,"nodeType":"90","endLine":249,"endColumn":58},{"ruleId":"74","severity":1,"message":"80","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":16},{"ruleId":"74","severity":1,"message":"91","line":4,"column":8,"nodeType":"76","messageId":"77","endLine":4,"endColumn":12},{"ruleId":"74","severity":1,"message":"92","line":8,"column":11,"nodeType":"76","messageId":"77","endLine":8,"endColumn":19},{"ruleId":"74","severity":1,"message":"93","line":9,"column":12,"nodeType":"76","messageId":"77","endLine":9,"endColumn":18},{"ruleId":"74","severity":1,"message":"94","line":11,"column":11,"nodeType":"76","messageId":"77","endLine":11,"endColumn":26},{"ruleId":"74","severity":1,"message":"95","line":8,"column":11,"nodeType":"76","messageId":"77","endLine":8,"endColumn":23},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'test_responses_items' is assigned a value but never used.","'test_responses' is assigned a value but never used.","'ReactDOM' is defined but never used.","'characters' is assigned a value but never used.","'setCharacters' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'data' is assigned a value but never used.","jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","'star' is defined but never used.","'starList' is assigned a value but never used.","'rating' is assigned a value but never used.","'handleStarHover' is assigned a value but never used.","'strategyList' is assigned a value but never used."]