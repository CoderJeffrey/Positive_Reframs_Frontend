{"ast":null,"code":"var _jsxFileName = \"D:\\\\Resume_Formatter_Project\\\\demo_project\\\\resumeai\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Create a react component that inputs a textarea message then performs a fetch request to localhost:3001 and get back a response as a data.message and displays the message in a box below\n// start with npm start - frontend\n// then node index.js - backend\n\n// should be a resume and job description\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = React.useState(''); // message to send to server\n  const [response, setResponse] = React.useState(''); // response from server\n  const [responses_items, setResponses] = React.useState(''); // response from server\n\n  const handleChange = event => {\n    setMessage(event.target.value);\n  }; // update the message to send to the server\n\n  // after the user receives a response, they can chop it to a list of strings if they are separated by a dot character\n  // then display each string in a list=\n  const handleSubmit = event => {\n    event.preventDefault();\n    fetch('http://localhost:3001', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: message\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(\"data message is: \", data.message);\n      console.log(data.message.split(\"\\n\"));\n      setResponses(data.message.split(\"\\n\"));\n      console.log(\"responses is: \", responses);\n      responses_items = responses.map(response_single => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: response_single\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this));\n      setResponses(data.message.split(\"\\n\"));\n      setResponse(data.message);\n    }); // send the message to the server\n  };\n\n  // for the response, chop it down to a list of strings if they are separated by a dot character\n  // then display each string in a list\n  // for the message, display it in a textarea box\n\n  // the textarea box and response text should be in the middle of the left screen and the right screen\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App_Header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Resume Advisor v1.0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"User_Submit\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Resume Advicer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Put Your Resume Text Below\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"resume_text_area\",\n              placeholder: \"Put our resume text, should start with your name\",\n              value: message,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"submit_button\",\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Model_Response\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Here is the top advice!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: responses_items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"prtadZowGW37CUBorBaNYcFcrjQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","App","_s","message","setMessage","useState","response","setResponse","responses_items","setResponses","handleChange","event","target","value","handleSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","then","json","data","console","log","split","responses","map","response_single","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","placeholder","onChange","type","_c","$RefreshReg$"],"sources":["D:/Resume_Formatter_Project/demo_project/resumeai/src/App.js"],"sourcesContent":["// Create a react component that inputs a textarea message then performs a fetch request to localhost:3001 and get back a response as a data.message and displays the message in a box below\n// start with npm start - frontend\n// then node index.js - backend\n\n// should be a resume and job description\n\nimport React, { Component } from 'react';\nimport './App.css';\n\nfunction App(){\n  const [message, setMessage] = React.useState(''); // message to send to server\n  const [response, setResponse] = React.useState(''); // response from server\n  const [responses_items, setResponses] = React.useState(''); // response from server\n\n\n  const handleChange = (event) => {\n    setMessage(event.target.value);\n  } // update the message to send to the server\n\n  // after the user receives a response, they can chop it to a list of strings if they are separated by a dot character\n  // then display each string in a list=\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    fetch('http://localhost:3001', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({message: message}),\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(\"data message is: \", data.message);\n      console.log(data.message.split(\"\\n\"));\n\n      setResponses(data.message.split(\"\\n\"));\n      console.log(\"responses is: \", responses);\n\n      responses_items = responses.map((response_single) =>\n        <li>{response_single}</li>\n      );\n      setResponses(data.message.split(\"\\n\"));\n      \n      setResponse(data.message);\n    }); // send the message to the server\n  }\n  \n  \n  \n\n  // for the response, chop it down to a list of strings if they are separated by a dot character\n  // then display each string in a list\n  // for the message, display it in a textarea box\n\n\n\n  // the textarea box and response text should be in the middle of the left screen and the right screen\n  return (\n  <div className=\"App\">\n  <div className=\"App_Header\">\n    <h1>Resume Advisor v1.0</h1>\n  </div>\n  <div className=\"User_Submit\">\n    <form onSubmit={handleSubmit}>\n      <h1>Resume Advicer</h1>\n      <p>Put Your Resume Text Below</p>\n      <div>\n        <label>\n          <textarea className='resume_text_area' placeholder='Put our resume text, should start with your name' value={message} onChange={handleChange} />\n        </label>\n      </div>\n      \n      <input className='submit_button' type=\"submit\" value=\"Submit\" />\n    </form>\n  </div>\n  \n  <div className=\"Model_Response\">\n    <h1>Here is the top advice!</h1>\n    <p>{response}</p>\n    <ul>{responses_items}</ul>\n  </div>\n\n  </div>\n);\n}\n\nexport default App;\n\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAE;EAAAC,EAAA;EACZ,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,KAAK,CAACQ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,KAAK,CAACQ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACG,eAAe,EAAEC,YAAY,CAAC,GAAGZ,KAAK,CAACQ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAG5D,MAAMK,YAAY,GAAIC,KAAK,IAAK;IAC9BP,UAAU,CAACO,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAChC,CAAC,EAAC;;EAEF;EACA;EACA,MAAMC,YAAY,GAAIH,KAAK,IAAK;IAC9BA,KAAK,CAACI,cAAc,EAAE;IACtBC,KAAK,CAAC,uBAAuB,EAAE;MAC7BC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAClB,OAAO,EAAEA;MAAO,CAAC;IACzC,CAAC,CAAC,CACDmB,IAAI,CAAChB,QAAQ,IAAIA,QAAQ,CAACiB,IAAI,EAAE,CAAC,CACjCD,IAAI,CAACE,IAAI,IAAI;MACZC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,IAAI,CAACrB,OAAO,CAAC;MAC9CsB,OAAO,CAACC,GAAG,CAACF,IAAI,CAACrB,OAAO,CAACwB,KAAK,CAAC,IAAI,CAAC,CAAC;MAErClB,YAAY,CAACe,IAAI,CAACrB,OAAO,CAACwB,KAAK,CAAC,IAAI,CAAC,CAAC;MACtCF,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEE,SAAS,CAAC;MAExCpB,eAAe,GAAGoB,SAAS,CAACC,GAAG,CAAEC,eAAe,iBAC9C9B,OAAA;QAAA+B,QAAA,EAAKD;MAAe;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,CAC3B;MACD1B,YAAY,CAACe,IAAI,CAACrB,OAAO,CAACwB,KAAK,CAAC,IAAI,CAAC,CAAC;MAEtCpB,WAAW,CAACiB,IAAI,CAACrB,OAAO,CAAC;IAC3B,CAAC,CAAC,CAAC,CAAC;EACN,CAAC;;EAKD;EACA;EACA;;EAIA;EACA,oBACAH,OAAA;IAAKoC,SAAS,EAAC,KAAK;IAAAL,QAAA,gBACpB/B,OAAA;MAAKoC,SAAS,EAAC,YAAY;MAAAL,QAAA,eACzB/B,OAAA;QAAA+B,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACxB,eACNnC,OAAA;MAAKoC,SAAS,EAAC,aAAa;MAAAL,QAAA,eAC1B/B,OAAA;QAAMqC,QAAQ,EAAEvB,YAAa;QAAAiB,QAAA,gBAC3B/B,OAAA;UAAA+B,QAAA,EAAI;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,eACvBnC,OAAA;UAAA+B,QAAA,EAAG;QAA0B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAI,eACjCnC,OAAA;UAAA+B,QAAA,eACE/B,OAAA;YAAA+B,QAAA,eACE/B,OAAA;cAAUoC,SAAS,EAAC,kBAAkB;cAACE,WAAW,EAAC,kDAAkD;cAACzB,KAAK,EAAEV,OAAQ;cAACoC,QAAQ,EAAE7B;YAAa;cAAAsB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAG;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAC1I;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACJ,eAENnC,OAAA;UAAOoC,SAAS,EAAC,eAAe;UAACI,IAAI,EAAC,QAAQ;UAAC3B,KAAK,EAAC;QAAQ;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAC3D;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACH,eAENnC,OAAA;MAAKoC,SAAS,EAAC,gBAAgB;MAAAL,QAAA,gBAC7B/B,OAAA;QAAA+B,QAAA,EAAI;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAChCnC,OAAA;QAAA+B,QAAA,EAAIzB;MAAQ;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACjBnC,OAAA;QAAA+B,QAAA,EAAKvB;MAAe;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACtB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEA;AAER;AAACjC,EAAA,CA3EQD,GAAG;AAAAwC,EAAA,GAAHxC,GAAG;AA6EZ,eAAeA,GAAG;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}