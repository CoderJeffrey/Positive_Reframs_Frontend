{"ast":null,"code":"var _jsxFileName = \"D:\\\\Research\\\\Positive_Reframing\\\\Front_End\\\\Positive_Reframs_Frontend\\\\demo_project\\\\positiveGPT\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Create a react component that inputs a textarea message then performs a fetch request to localhost:3001 and get back a response as a data.message and displays the message in a box below\n// start with npm start - frontend\n// then node index.js - backend\n\n// should be a resume and job description\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport StrategySelection from './components/StrategySelection';\nimport SuggestionCard from './components/SuggestionCard.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = React.useState(''); // message to send to server\n  const [fileName, setFileName] = React.useState('☁ Upload Your Negative Thoughts.txt'); // name of the file to upload [should be a resume\n  const {\n    characters,\n    setCharacters\n  } = React.useState(0); // number of characters in the textarea box\n  const [strategy, setStrategy] = React.useState('');\n  const [isSubmitting, setIsSubmitting] = React.useState(false); // check whether user has submitted the input or not\n  const [isLoading, setIsLoading] = React.useState(false); // check whether the model has sent back a response or not\n\n  const [responses_items_gpt, set_responses_gpt] = React.useState(''); // response from server\n  const [responses_items_own, set_responses_own] = React.useState(''); // response from server\n\n  const test_responses = [\"1. Take a break and focus on self-care. Make sure to get enough rest, eat healthy meals, and exercise regularly.\", \"2. Make time for activities that bring you joy. Whether it’s reading a book, listening to music, or going for a walk, find something that helps you relax and enjoy yourself.\", \"3. Talk to someone. Reach out to a friend or family member and let them know how you’re feeling. Talking to\"];\n  const [userRatings, setUserRatings] = React.useState([]); // user ratings for each response\n\n  const test_responses_items = test_responses.map(response_single => /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"suggestion_card_container\",\n    children: /*#__PURE__*/_jsxDEV(SuggestionCard, {\n      text: response_single\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this));\n  const handleFileUpload = event => {\n    const SelectedFile = event.target.files[0];\n    console.log(SelectedFile);\n    if (SelectedFile.type === \"text/plain\") {\n      const reader = new FileReader();\n      reader.readAsText(SelectedFile);\n      setFileName(`File name: ${SelectedFile.name}`);\n\n      // Once reader finishes reading the file, it will call the onload function\n      reader.onload = event => {\n        console.log(\"Getting user file:\");\n        setMessage(event.target.result);\n      };\n    } else {\n      setFileName(\"File is not a clean text file. Please upload .txt file.\");\n    }\n  };\n  const handleChange = event => {\n    setMessage(event.target.value);\n    if (event.target.value.length > 100) {\n      setMessage(event.target.value.substring(0, 100));\n    }\n  }; // update the message to send to the server\n\n  // after the user receives a response, they can chop it to a list of strings if they are separated by a dot character\n  // then display each string in a list=\n  const handleSubmit = async event => {\n    setIsSubmitting(true);\n    setIsLoading(true);\n    event.preventDefault();\n    await fetch('http://localhost:3001', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: message,\n        strategy: strategy\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      console.log(\"Own Server response is: \", data.response_from_own_server);\n      console.log(\"GPT Server response is: \", data.response_from_gpt);\n      const responses_gpt = data.response_from_gpt.split(\"\\n\");\n      const response_from_own_server = data.response_from_own_server.split(\"\\n\");\n      const non_empty_responses_gpt = responses_gpt.filter(response_single => response_single !== \"\");\n      const non_empty_responses_own = response_from_own_server.filter(response_single => response_single !== \"\");\n      const responses_items_gpt = non_empty_responses_gpt.map(response_single => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"suggestion_card_container\",\n        children: /*#__PURE__*/_jsxDEV(SuggestionCard, {\n          text: response_single\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 10\n      }, this));\n      const responses_items_own = non_empty_responses_own.map(response_single => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"suggestion_card_container\",\n        children: /*#__PURE__*/_jsxDEV(SuggestionCard, {\n          text: response_single,\n          handleRatingChange: handleRatingChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 10\n      }, this));\n      set_responses_gpt(responses_items_gpt);\n      set_responses_own(responses_items_own);\n      setIsLoading(false);\n    }); // send the message to the server\n  };\n\n  const handleRatingChange = event => {\n    console.log(event.target.value);\n    // record the rating from user\n\n    // send it to the supabase\n  };\n\n  // for the response, chop it down to a list of strings if they are separated by a dot character\n  // then display each string in a list\n  // for the message, display it in a textarea box\n\n  // the textarea box and response text should be in the middle of the left screen and the right screen\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App_Header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Positive Reframer v1.0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"User_Submit\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Look for a Positive Spin?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"positive_text_area\",\n                maxLength: 100,\n                placeholder: \"Put the sentence for paraphrasing\",\n                value: message,\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [message.length, \"/100 Characters Limit\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"resume-file\",\n              className: \"custom-file-upload\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: fileName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"submit_text_button\",\n                id: \"resume-file\",\n                name: \"resume\",\n                type: \"file\",\n                onChange: handleFileUpload\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(StrategySelection, {\n            setCurrentStrategy: setStrategy\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"submit_button\",\n            type: \"submit\",\n            value: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Model_Response\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Positive Reframed Sentences\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"answer_area\",\n          children: isSubmitting ? isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 28\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Own Responses\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"responses_items_contianer\",\n              children: responses_items_own\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \" GPT Responses\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"responses_items_contianer\",\n              children: responses_items_gpt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No input yet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 20\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"KRhNWvEKxFPBOfj/NM+sYuwHyHI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Component","StrategySelection","SuggestionCard","jsxDEV","_jsxDEV","App","_s","message","setMessage","useState","fileName","setFileName","characters","setCharacters","strategy","setStrategy","isSubmitting","setIsSubmitting","isLoading","setIsLoading","responses_items_gpt","set_responses_gpt","responses_items_own","set_responses_own","test_responses","userRatings","setUserRatings","test_responses_items","map","response_single","className","children","text","_jsxFileName","lineNumber","columnNumber","handleFileUpload","event","SelectedFile","target","files","console","log","type","reader","FileReader","readAsText","name","onload","result","handleChange","value","length","substring","handleSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","data","response_from_own_server","response_from_gpt","responses_gpt","split","non_empty_responses_gpt","filter","non_empty_responses_own","handleRatingChange","onSubmit","maxLength","placeholder","onChange","htmlFor","id","setCurrentStrategy","_c","$RefreshReg$"],"sources":["D:/Research/Positive_Reframing/Front_End/Positive_Reframs_Frontend/demo_project/positiveGPT/src/App.js"],"sourcesContent":["// Create a react component that inputs a textarea message then performs a fetch request to localhost:3001 and get back a response as a data.message and displays the message in a box below\r\n// start with npm start - frontend\r\n// then node index.js - backend\r\n\r\n// should be a resume and job description\r\n\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport StrategySelection from './components/StrategySelection';\r\nimport SuggestionCard from './components/SuggestionCard.jsx';\r\n\r\nfunction App(){\r\n  const [message, setMessage] = React.useState(''); // message to send to server\r\n  const [fileName, setFileName] = React.useState('☁ Upload Your Negative Thoughts.txt'); // name of the file to upload [should be a resume\r\n  const {characters, setCharacters} = React.useState(0); // number of characters in the textarea box\r\n  const [strategy, setStrategy] = React.useState('')\r\n\r\n  const [isSubmitting, setIsSubmitting] = React.useState(false); // check whether user has submitted the input or not\r\n  const [isLoading, setIsLoading] = React.useState(false); // check whether the model has sent back a response or not\r\n\r\n  const [responses_items_gpt, set_responses_gpt] = React.useState(''); // response from server\r\n  const [responses_items_own, set_responses_own] = React.useState(''); // response from server\r\n  \r\n  const test_responses = [\"1. Take a break and focus on self-care. Make sure to get enough rest, eat healthy meals, and exercise regularly.\",\r\n                               \"2. Make time for activities that bring you joy. Whether it’s reading a book, listening to music, or going for a walk, find something that helps you relax and enjoy yourself.\", \r\n                               \"3. Talk to someone. Reach out to a friend or family member and let them know how you’re feeling. Talking to\"];\r\n  \r\n  const [userRatings, setUserRatings] = React.useState([]); // user ratings for each response\r\n                               \r\n  const test_responses_items = test_responses.map((response_single) =>\r\n        <li className='suggestion_card_container'>\r\n          <SuggestionCard text={response_single} />\r\n        </li>\r\n  );\r\n\r\n  const handleFileUpload = (event) => {\r\n    const SelectedFile = event.target.files[0];\r\n    console.log(SelectedFile);\r\n    if(SelectedFile.type === \"text/plain\"){\r\n      const reader = new FileReader();\r\n      reader.readAsText(SelectedFile);\r\n      setFileName(`File name: ${SelectedFile.name}`);\r\n\r\n      // Once reader finishes reading the file, it will call the onload function\r\n      reader.onload = (event) => {\r\n        console.log(\"Getting user file:\")\r\n        setMessage(event.target.result);\r\n      }\r\n      \r\n    } else {\r\n      setFileName(\"File is not a clean text file. Please upload .txt file.\");\r\n    }\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    setMessage(event.target.value);\r\n    if(event.target.value.length > 100){\r\n      setMessage(event.target.value.substring(0,100));\r\n    }\r\n  } // update the message to send to the server\r\n\r\n  // after the user receives a response, they can chop it to a list of strings if they are separated by a dot character\r\n  // then display each string in a list=\r\n  const handleSubmit = async (event) => {\r\n    setIsSubmitting(true);\r\n    setIsLoading(true);\r\n    event.preventDefault();\r\n    await fetch('http://localhost:3001', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        message: message,\r\n        strategy: strategy\r\n      }),\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log(data)\r\n      console.log(\"Own Server response is: \", data.response_from_own_server);\r\n      console.log(\"GPT Server response is: \", data.response_from_gpt);\r\n\r\n      const responses_gpt = data.response_from_gpt.split(\"\\n\");\r\n      const response_from_own_server = data.response_from_own_server.split(\"\\n\");\r\n\r\n      const non_empty_responses_gpt = responses_gpt.filter((response_single) => response_single !== \"\");\r\n      const non_empty_responses_own = response_from_own_server.filter((response_single) => response_single !== \"\");\r\n      const responses_items_gpt = non_empty_responses_gpt.map((response_single) =>\r\n        (<li className='suggestion_card_container'>\r\n          <SuggestionCard text={response_single} />\r\n        </li>)\r\n      );\r\n\r\n      const responses_items_own = non_empty_responses_own.map((response_single) =>\r\n        (<li className='suggestion_card_container'>\r\n          <SuggestionCard text={response_single} handleRatingChange={handleRatingChange}/>\r\n        </li>)\r\n      );\r\n\r\n      set_responses_gpt(responses_items_gpt);\r\n      set_responses_own(responses_items_own);\r\n      setIsLoading(false);\r\n    }); // send the message to the server\r\n  }\r\n  \r\n  \r\n  const handleRatingChange = (event) => {\r\n    console.log(event.target.value);\r\n    // record the rating from user\r\n\r\n    // send it to the supabase\r\n\r\n  }\r\n\r\n  // for the response, chop it down to a list of strings if they are separated by a dot character\r\n  // then display each string in a list\r\n  // for the message, display it in a textarea box\r\n\r\n\r\n\r\n  // the textarea box and response text should be in the middle of the left screen and the right screen\r\n  return (\r\n  <div className=\"App\">\r\n    <div className=\"App_Header\">\r\n      <h1>Positive Reframer v1.0</h1>\r\n    </div>\r\n\r\n    <div>\r\n      <div className=\"User_Submit\">\r\n        <form onSubmit={handleSubmit}>\r\n          <h1>Look for a Positive Spin?</h1>\r\n          <div>\r\n            <label>\r\n              <textarea className='positive_text_area' maxLength={100} placeholder='Put the sentence for paraphrasing' value={message} onChange={handleChange} />\r\n              <p>{message.length}/100 Characters Limit</p>\r\n            </label>\r\n          </div>\r\n\r\n          <div>\r\n              <label htmlFor=\"resume-file\" className=\"custom-file-upload\">\r\n                <span>{fileName}</span>\r\n                <input className='submit_text_button' id=\"resume-file\" name='resume' type=\"file\" onChange={handleFileUpload}/>\r\n              </label>\r\n          </div>\r\n          \r\n          <StrategySelection setCurrentStrategy={setStrategy}/>\r\n          <input className='submit_button' type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    \r\n      <div className=\"Model_Response\">\r\n        <h1>Positive Reframed Sentences</h1>\r\n        <div className='answer_area'>\r\n          {/* {\r\n            <ul className='responses_items_contianer'>\r\n              {test_responses_items}\r\n            </ul>\r\n          } */}\r\n          {\r\n            isSubmitting ? (\r\n              isLoading ? (<p>Loading...</p> ) : \r\n                (\r\n                  <div>\r\n                    <h3>Own Responses</h3>\r\n                    <ul className='responses_items_contianer'>\r\n                      {responses_items_own}\r\n                    </ul>\r\n\r\n                    <h3> GPT Responses</h3>\r\n                    <ul className='responses_items_contianer'>\r\n                      {responses_items_gpt}\r\n                    </ul>\r\n                  </div>\r\n                )\r\n              ) : (<p>No input yet</p>)\r\n          }\r\n            \r\n        </div>\r\n        \r\n        \r\n      </div>  \r\n    </div>\r\n\r\n  </div>\r\n  \r\n);\r\n}\r\n\r\nexport default App;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}