{"ast":null,"code":"var _jsxFileName = \"D:\\\\Research\\\\Positive_Reframing\\\\Front_End\\\\Positive_Reframs_Frontend\\\\demo_project\\\\positiveGPT\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Create a react component that inputs a textarea message then performs a fetch request to localhost:3001 and get back a response as a data.message and displays the message in a box below\n// start with npm start - frontend\n// then node index.js - backend\n\n// should be a resume and job description\n\nimport React, { Component, useEffect } from 'react';\nimport './App.css';\nimport StrategySelection from './components/StrategySelection';\nimport SuggestionCard from './components/SuggestionCard.jsx';\nimport { supabase } from './client.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = React.useState(''); // message to send to server\n  const [fileName, setFileName] = React.useState('☁ Upload Your Negative Thoughts.txt'); // name of the file to upload [should be a resume\n  const {\n    characters,\n    setCharacters\n  } = React.useState(0); // number of characters in the textarea box\n  const [strategy, setStrategy] = React.useState('');\n  const [isSubmitting, setIsSubmitting] = React.useState(false); // check whether user has submitted the input or not\n  const [isLoading, setIsLoading] = React.useState(false); // check whether the model has sent back a response or not\n\n  const [responses_items_gpt, set_responses_gpt] = React.useState(''); // response from server\n  const [responses_items_own, set_responses_own] = React.useState(''); // response from server\n\n  const test_responses = [\"1. Take a break and focus on self-care. Make sure to get enough rest, eat healthy meals, and exercise regularly.\", \"2. Make time for activities that bring you joy. Whether it’s reading a book, listening to music, or going for a walk, find something that helps you relax and enjoy yourself.\", \"3. Talk to someone. Reach out to a friend or family member and let them know how you’re feeling. Talking to\"];\n  const [userRatings, setUserRatings] = React.useState([{\n    id: 0,\n    rating: 1\n  },\n  // own server response 1\n  {\n    id: 1,\n    rating: 1\n  },\n  // gpt response 1\n  {\n    id: 2,\n    rating: 1\n  },\n  // gpt response 2\n  {\n    id: 3,\n    rating: 1\n  } // gpt response 3\n  ]); // user ratings for each response\n\n  const test_responses_items = test_responses.map(response_single => /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"suggestion_card_container\",\n    children: /*#__PURE__*/_jsxDEV(SuggestionCard, {\n      text: response_single\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this));\n  const handleFileUpload = event => {\n    const SelectedFile = event.target.files[0];\n    console.log(SelectedFile);\n    if (SelectedFile.type === \"text/plain\") {\n      const reader = new FileReader();\n      reader.readAsText(SelectedFile);\n      setFileName(`File name: ${SelectedFile.name}`);\n\n      // Once reader finishes reading the file, it will call the onload function\n      reader.onload = event => {\n        console.log(\"Getting user file:\");\n        setMessage(event.target.result);\n      };\n    } else {\n      setFileName(\"File is not a clean text file. Please upload .txt file.\");\n    }\n  };\n  const handleChange = event => {\n    setMessage(event.target.value);\n    if (event.target.value.length > 100) {\n      setMessage(event.target.value.substring(0, 100));\n    }\n  }; // update the message to send to the server\n\n  // after the user receives a response, they can chop it to a list of strings if they are separated by a dot character\n  // then display each string in a list=\n  const handleSubmit = async event => {\n    setIsSubmitting(true);\n    setIsLoading(true);\n    event.preventDefault();\n    await fetch('http://localhost:3001', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: message,\n        strategy: strategy\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      console.log(\"Own Server response is: \", data.response_from_own_server);\n      console.log(\"GPT Server response is: \", data.response_from_gpt);\n      const responses_gpt = data.response_from_gpt.split(\"\\n\");\n      const response_from_own_server = data.response_from_own_server.split(\"\\n\");\n      const non_empty_responses_gpt = responses_gpt.filter(response_single => response_single !== \"\");\n      const non_empty_responses_own = response_from_own_server.filter(response_single => response_single !== \"\");\n      const responses_items_own = non_empty_responses_own.map((response_single, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"suggestion_card_container\",\n        children: /*#__PURE__*/_jsxDEV(SuggestionCard, {\n          text: response_single,\n          id: index,\n          handleRatingChange: handleRatingChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 10\n      }, this));\n      const responses_items_gpt = non_empty_responses_gpt.map((response_single, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"suggestion_card_container\",\n        children: /*#__PURE__*/_jsxDEV(SuggestionCard, {\n          text: response_single,\n          id: index + 1,\n          handleRatingChange: handleRatingChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 10\n      }, this));\n      set_responses_gpt(responses_items_gpt);\n      set_responses_own(responses_items_own);\n      setIsLoading(false);\n    }); // send the message to the server\n  };\n\n  const handleRatingChange = (updated_rating, id) => {\n    console.log(\"Target rating is: \", updated_rating);\n    console.log(\"id is:\", id);\n    // record the rating from user\n\n    setUserRatings(prevRatings => {\n      // Get the index of the rating with the provided id\n      const index = prevRatings.findIndex(rating => rating.id == id);\n\n      // Create a new array with updated values\n      const updatedRatings = [...prevRatings];\n      updatedRatings[index] = {\n        ...updatedRatings[index],\n        rating: parseInt(updated_rating) // Set the new rating value\n      };\n\n      // Return the updated array\n      return updatedRatings;\n    });\n  };\n  useEffect(() => {\n    // console log when the userRatings array is updated\n    console.log(\"User ratings are: \", userRatings);\n  }, [userRatings]);\n  const createPost = async event => {\n    const {\n      data,\n      error\n    } = await supabase.from('Ratings').insert([{\n      own_server_response_1: userRatings[0].rating,\n      gpt_server_response_1: userRatings[1].rating,\n      gpt_server_response_2: userRatings[2].rating,\n      gpt_response_3: userRatings[3].rating\n    }]);\n  };\n\n  // for the response, chop it down to a list of strings if they are separated by a dot character\n  // then display each string in a list\n  // for the message, display it in a textarea box\n\n  // the textarea box and response text should be in the middle of the left screen and the right screen\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App_Header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Positive Reframer v1.0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"User_Submit\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Look for a Positive Spin?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"positive_text_area\",\n                maxLength: 100,\n                placeholder: \"Put the sentence for paraphrasing\",\n                value: message,\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [message.length, \"/100 Characters Limit\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"resume-file\",\n              className: \"custom-file-upload\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: fileName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"submit_text_button\",\n                id: \"resume-file\",\n                name: \"resume\",\n                type: \"file\",\n                onChange: handleFileUpload\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(StrategySelection, {\n            setCurrentStrategy: setStrategy\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"submit_button\",\n            type: \"submit\",\n            value: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Model_Response\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Positive Reframed Sentences\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"answer_area\",\n          children: isSubmitting ? isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 28\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Own Responses\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"responses_items_contianer\",\n              children: responses_items_own\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \" GPT Responses\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"responses_items_contianer\",\n              children: responses_items_gpt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No input yet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 20\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"H2TGKZ9t4ULACQC1Kq5ied51eEA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Component","useEffect","StrategySelection","SuggestionCard","supabase","jsxDEV","_jsxDEV","App","_s","message","setMessage","useState","fileName","setFileName","characters","setCharacters","strategy","setStrategy","isSubmitting","setIsSubmitting","isLoading","setIsLoading","responses_items_gpt","set_responses_gpt","responses_items_own","set_responses_own","test_responses","userRatings","setUserRatings","id","rating","test_responses_items","map","response_single","className","children","text","_jsxFileName","lineNumber","columnNumber","handleFileUpload","event","SelectedFile","target","files","console","log","type","reader","FileReader","readAsText","name","onload","result","handleChange","value","length","substring","handleSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","data","response_from_own_server","response_from_gpt","responses_gpt","split","non_empty_responses_gpt","filter","non_empty_responses_own","index","handleRatingChange","updated_rating","prevRatings","findIndex","updatedRatings","parseInt","createPost","error","from","insert","own_server_response_1","gpt_server_response_1","gpt_server_response_2","gpt_response_3","onSubmit","maxLength","placeholder","onChange","htmlFor","setCurrentStrategy","_c","$RefreshReg$"],"sources":["D:/Research/Positive_Reframing/Front_End/Positive_Reframs_Frontend/demo_project/positiveGPT/src/App.js"],"sourcesContent":["// Create a react component that inputs a textarea message then performs a fetch request to localhost:3001 and get back a response as a data.message and displays the message in a box below\r\n// start with npm start - frontend\r\n// then node index.js - backend\r\n\r\n// should be a resume and job description\r\n\r\nimport React, { Component, useEffect } from 'react';\r\nimport './App.css';\r\nimport StrategySelection from './components/StrategySelection';\r\nimport SuggestionCard from './components/SuggestionCard.jsx';\r\nimport { supabase } from './client.js';\r\n\r\nfunction App(){\r\n  const [message, setMessage] = React.useState(''); // message to send to server\r\n  const [fileName, setFileName] = React.useState('☁ Upload Your Negative Thoughts.txt'); // name of the file to upload [should be a resume\r\n  const {characters, setCharacters} = React.useState(0); // number of characters in the textarea box\r\n  const [strategy, setStrategy] = React.useState('')\r\n\r\n  const [isSubmitting, setIsSubmitting] = React.useState(false); // check whether user has submitted the input or not\r\n  const [isLoading, setIsLoading] = React.useState(false); // check whether the model has sent back a response or not\r\n\r\n  const [responses_items_gpt, set_responses_gpt] = React.useState(''); // response from server\r\n  const [responses_items_own, set_responses_own] = React.useState(''); // response from server\r\n  \r\n  const test_responses = [\"1. Take a break and focus on self-care. Make sure to get enough rest, eat healthy meals, and exercise regularly.\",\r\n                               \"2. Make time for activities that bring you joy. Whether it’s reading a book, listening to music, or going for a walk, find something that helps you relax and enjoy yourself.\", \r\n                               \"3. Talk to someone. Reach out to a friend or family member and let them know how you’re feeling. Talking to\"];\r\n  \r\n  const [userRatings, setUserRatings] = React.useState([\r\n    {id: 0, rating: 1}, // own server response 1\r\n    {id: 1, rating: 1}, // gpt response 1\r\n    {id: 2, rating: 1}, // gpt response 2\r\n    {id: 3, rating: 1}, // gpt response 3\r\n  ]); // user ratings for each response\r\n                               \r\n  const test_responses_items = test_responses.map((response_single) =>\r\n        <li className='suggestion_card_container'>\r\n          <SuggestionCard text={response_single} />\r\n        </li>\r\n  );\r\n\r\n  const handleFileUpload = (event) => {\r\n    const SelectedFile = event.target.files[0];\r\n    console.log(SelectedFile);\r\n    if(SelectedFile.type === \"text/plain\"){\r\n      const reader = new FileReader();\r\n      reader.readAsText(SelectedFile);\r\n      setFileName(`File name: ${SelectedFile.name}`);\r\n\r\n      // Once reader finishes reading the file, it will call the onload function\r\n      reader.onload = (event) => {\r\n        console.log(\"Getting user file:\")\r\n        setMessage(event.target.result);\r\n      }\r\n      \r\n    } else {\r\n      setFileName(\"File is not a clean text file. Please upload .txt file.\");\r\n    }\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    setMessage(event.target.value);\r\n    if(event.target.value.length > 100){\r\n      setMessage(event.target.value.substring(0,100));\r\n    }\r\n  } // update the message to send to the server\r\n\r\n  // after the user receives a response, they can chop it to a list of strings if they are separated by a dot character\r\n  // then display each string in a list=\r\n  const handleSubmit = async (event) => {\r\n    setIsSubmitting(true);\r\n    setIsLoading(true);\r\n    event.preventDefault();\r\n    await fetch('http://localhost:3001', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        message: message,\r\n        strategy: strategy\r\n      }),\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log(data)\r\n      console.log(\"Own Server response is: \", data.response_from_own_server);\r\n      console.log(\"GPT Server response is: \", data.response_from_gpt);\r\n\r\n      const responses_gpt = data.response_from_gpt.split(\"\\n\");\r\n      const response_from_own_server = data.response_from_own_server.split(\"\\n\");\r\n\r\n      const non_empty_responses_gpt = responses_gpt.filter((response_single) => response_single !== \"\");\r\n      const non_empty_responses_own = response_from_own_server.filter((response_single) => response_single !== \"\");\r\n      \r\n      const responses_items_own = non_empty_responses_own.map((response_single, index) =>\r\n        (<li className='suggestion_card_container'>\r\n          <SuggestionCard text={response_single} id={index} handleRatingChange={handleRatingChange}/>\r\n        </li>)\r\n      );\r\n\r\n      const responses_items_gpt = non_empty_responses_gpt.map((response_single, index) =>\r\n        (<li className='suggestion_card_container'>\r\n          <SuggestionCard text={response_single} id={index+1} handleRatingChange={handleRatingChange}/>\r\n        </li>)\r\n      );\r\n\r\n      \r\n      set_responses_gpt(responses_items_gpt);\r\n      set_responses_own(responses_items_own);\r\n      setIsLoading(false);\r\n    }); // send the message to the server\r\n  }\r\n  \r\n  const handleRatingChange = (updated_rating, id) => {\r\n    console.log(\"Target rating is: \", updated_rating);\r\n    console.log(\"id is:\",id);\r\n    // record the rating from user\r\n\r\n    setUserRatings(prevRatings => {\r\n      // Get the index of the rating with the provided id\r\n      const index = prevRatings.findIndex(rating => rating.id == id);\r\n    \r\n      // Create a new array with updated values\r\n      const updatedRatings = [...prevRatings];\r\n      updatedRatings[index] = {\r\n        ...updatedRatings[index],\r\n        rating: parseInt(updated_rating) // Set the new rating value\r\n      };\r\n    \r\n      // Return the updated array\r\n      return updatedRatings;\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    // console log when the userRatings array is updated\r\n    console.log(\"User ratings are: \", userRatings);\r\n  }, [userRatings]);\r\n\r\n  const createPost = async (event) => {\r\n    const { data, error } = await supabase\r\n      .from('Ratings')\r\n      .insert([\r\n        { own_server_response_1: userRatings[0].rating, \r\n          gpt_server_response_1: userRatings[1].rating,\r\n          gpt_server_response_2: userRatings[2].rating,\r\n          gpt_response_3: userRatings[3].rating, },\r\n    ])\r\n  }\r\n\r\n  // for the response, chop it down to a list of strings if they are separated by a dot character\r\n  // then display each string in a list\r\n  // for the message, display it in a textarea box\r\n\r\n\r\n\r\n  // the textarea box and response text should be in the middle of the left screen and the right screen\r\n  return (\r\n  <div className=\"App\">\r\n    <div className=\"App_Header\">\r\n      <h1>Positive Reframer v1.0</h1>\r\n    </div>\r\n\r\n    <div>\r\n      <div className=\"User_Submit\">\r\n        <form onSubmit={handleSubmit}>\r\n          <h1>Look for a Positive Spin?</h1>\r\n          <div>\r\n            <label>\r\n              <textarea className='positive_text_area' maxLength={100} placeholder='Put the sentence for paraphrasing' value={message} onChange={handleChange} />\r\n              <p>{message.length}/100 Characters Limit</p>\r\n            </label>\r\n          </div>\r\n\r\n          <div>\r\n              <label htmlFor=\"resume-file\" className=\"custom-file-upload\">\r\n                <span>{fileName}</span>\r\n                <input className='submit_text_button' id=\"resume-file\" name='resume' type=\"file\" onChange={handleFileUpload}/>\r\n              </label>\r\n          </div>\r\n          \r\n          <StrategySelection setCurrentStrategy={setStrategy}/>\r\n          <input className='submit_button' type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    \r\n      <div className=\"Model_Response\">\r\n        <h1>Positive Reframed Sentences</h1>\r\n        <div className='answer_area'>\r\n          {/* {\r\n            <ul className='responses_items_contianer'>\r\n              {test_responses_items}\r\n            </ul>\r\n          } */}\r\n          {\r\n            isSubmitting ? (\r\n              isLoading ? (<p>Loading...</p> ) : \r\n                (\r\n                  <div>\r\n                    <h3>Own Responses</h3>\r\n                    <ul className='responses_items_contianer'>\r\n                      {responses_items_own}\r\n                    </ul>\r\n\r\n                    <h3> GPT Responses</h3>\r\n                    <ul className='responses_items_contianer'>\r\n                      {responses_items_gpt}\r\n                    </ul>\r\n                  </div>\r\n                )\r\n              ) : (<p>No input yet</p>)\r\n          }\r\n            \r\n        </div>\r\n        \r\n        \r\n      </div>  \r\n    </div>\r\n\r\n  </div>\r\n  \r\n);\r\n}\r\n\r\nexport default App;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}